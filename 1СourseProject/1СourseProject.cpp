#include "ISort.h"
#include "BubbleSort.h"
#include "SelectionSort.h"
#include "InsertionSort.h"
#include "ShellSort.h"


#include <iostream>
#include <memory>
#include <vector>

using namespace std;

enum counters{SWAP,COMPARISON};

void sorting(vector<vector<int>>& array) {

    BubbleSort bubble_sort;
    SelectionSort selection_sort;
    InsertionSort insertion_sort;
    ShellSort shell_sort;

    vector<int> counters_for_bubble_sort{ 0, 0 };
    vector<int> counters_for_selection_sort{ 0, 0 };
    vector<int> counters_for_insertion_sort{ 0, 0 };
    vector<int> counters_for_shell_sort{ 0, 0 };

    vector<vector<int>> array_for_bubble_sort = array;
    vector<vector<int>> array_for_selection_sort = array;
    vector<vector<int>> array_for_insertion_sort = array;
    vector<vector<int>> array_for_shell_sort = array;


    /*---------------------------------------------------------------------------------------------------
     -----------------------------------------------------------------------------------------------------
     -------------------------------------------BUBBLE SORT--------------------------------------------
     -----------------------------------------------------------------------------------------------------
     -----------------------------------------------------------------------------------------------------*/

    for (int i = 0; i < array_for_bubble_sort.size(); i++) {
        
        bubble_sort.Sort(array_for_bubble_sort[i], array_for_bubble_sort[i].size());

        for (int j = 0; j < array_for_bubble_sort[i].size(); j++) {

            cout << array_for_bubble_sort[i][j] << '\t';

        }

        cout << endl;

        counters_for_bubble_sort[SWAP] += bubble_sort.get_swap_counter();
        counters_for_bubble_sort[COMPARISON] += bubble_sort.get_comparison_counter();

        bubble_sort.reset_counters();

    }

    cout << endl;

    /*---------------------------------------------------------------------------------------------------
    -----------------------------------------------------------------------------------------------------
    -------------------------------------------BUBBLE SORT-----------------------------------------------
    -----------------------------------------------------------------------------------------------------
    -----------------------------------------------------------------------------------------------------*/






    /*---------------------------------------------------------------------------------------------------
    -----------------------------------------------------------------------------------------------------
    -------------------------------------------SELECTION SORT--------------------------------------------
    -----------------------------------------------------------------------------------------------------
    -----------------------------------------------------------------------------------------------------*/
    for (int i = 0; i < array_for_selection_sort.size(); i++) {

        selection_sort.Sort(array_for_selection_sort[i], array_for_selection_sort[i].size());

        for (int j = 0; j < array_for_selection_sort[i].size(); j++) {

            cout << array_for_selection_sort[i][j] << '\t';

        }

        cout << endl;

        counters_for_selection_sort[SWAP] += selection_sort.get_swap_counter();
        counters_for_selection_sort[COMPARISON] += selection_sort.get_comparison_counter();

        selection_sort.reset_counters();

    }
    
    cout << endl;

    /*---------------------------------------------------------------------------------------------------
    -----------------------------------------------------------------------------------------------------
    -------------------------------------------SELECTION SORT--------------------------------------------
    -----------------------------------------------------------------------------------------------------
    -----------------------------------------------------------------------------------------------------*/




    /*---------------------------------------------------------------------------------------------------
    -----------------------------------------------------------------------------------------------------
    -------------------------------------------INSERTION SORT--------------------------------------------
    -----------------------------------------------------------------------------------------------------
    -----------------------------------------------------------------------------------------------------*/
    for (int i = 0; i < array_for_insertion_sort.size(); i++) {

        insertion_sort.Sort(array_for_insertion_sort[i], array_for_insertion_sort[i].size());

        for (int j = 0; j < array_for_insertion_sort[i].size(); j++) {

            cout << array_for_insertion_sort[i][j] << '\t';

        }

        cout << endl;

        counters_for_insertion_sort[SWAP] += insertion_sort.get_swap_counter();
        counters_for_insertion_sort[COMPARISON] += insertion_sort.get_comparison_counter();

        insertion_sort.reset_counters();

    }

    cout << endl;

    /*---------------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------
   -------------------------------------------INSERTION SORT---------------------------------------------
   ------------------------------------------------------------------------------------------------------
   -----------------------------------------------------------------------------------------------------*/




   /*---------------------------------------------------------------------------------------------------
  ------------------------------------------------------------------------------------------------------
  -------------------------------------------SHELL SORT-------------------------------------------------
  ------------------------------------------------------------------------------------------------------
  -----------------------------------------------------------------------------------------------------*/
    for (int i = 0; i < array_for_shell_sort.size(); i++) {

        shell_sort.Sort(array_for_shell_sort[i], array_for_shell_sort[i].size());

        for (int j = 0; j < array_for_shell_sort[i].size(); j++) {

            cout << array_for_shell_sort[i][j] << '\t';

        }

        cout << endl;

        counters_for_shell_sort[SWAP] += shell_sort.get_swap_counter();
        counters_for_shell_sort[COMPARISON] += shell_sort.get_comparison_counter();

        shell_sort.reset_counters();

    }



  /*---------------------------------------------------------------------------------------------------
 ------------------------------------------------------------------------------------------------------
 -------------------------------------------SHELL SORT-------------------------------------------------
 ------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------*/


    

}






int main()
{
    
    
    vector<vector<int>> array = { { 5,4,3,2,1}, {6,5,4,3,2}, {7,6,5,4,3} };

    sorting(array);
    
    
    

}
